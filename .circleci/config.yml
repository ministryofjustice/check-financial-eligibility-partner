version: 2.1

orbs:
  slack: circleci/slack@4.5.2

executors:
  basic-executor:
    docker:
      - image: cimg/base:2020.01
  cloud-platform-executor:
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.1
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-estimate-eligibility
  linting-executor:
    docker:
      - image: cimg/ruby:3.2.1-node
        environment:
          - RAILS_ENV=test
          - TZ: "Europe/London"
  notification-executor:
    docker:
      - image: 'cibuilds/base:latest'
        environment:
          TERM: dumb
    resource_class: small
  test-executor:
    docker:
      - image: cimg/ruby:3.2.1-node
        environment:
          - RAILS_ENV=test
          - PGHOST=localhost
          - PGUSER=user
          - TZ: "Europe/London"
          - ALLOW_FUTURE_SUBMISSION_DATE: true
      - image: cimg/postgres:10.18
        environment:
          - POSTGRES_USER=user
          - POSTGRES_DB=check_financial_eligibility_partner_test

references:
  build_docker_image: &build_docker_image
    run:
      name: Build docker image
      command: |
        docker build \
        --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
        --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
        --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
        -t app .

  push_to_ecr: &push_to_ecr
    run:
      name: Push image to ecr repo
      command: |
        docker tag app "${ECR_ENDPOINT}:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}:${CIRCLE_SHA1}"

        if [ "${CIRCLE_BRANCH}" == "main" ]; then
          docker tag app "${ECR_ENDPOINT}:latest"
          docker push "${ECR_ENDPOINT}:latest"
        fi

  setup_aws_login: &setup_aws_login
    run:
      name: Setup aws login
      command: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        sudo pip3 install awscli
        $(aws ecr get-login --region eu-west-2 --no-include-email)
  authenticate_k8s: &authenticate_k8s
    run:
      name: Authenticate with cluster
      command: |
        echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
        kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
        kubectl config set-credentials circleci --token=${K8S_TOKEN}
        kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_UAT_NAMESPACE}
        kubectl config use-context ${K8S_CLUSTER_NAME}

  update_packages: &update_packages
    run:
      name: Update packages
      command: sudo apt-get update
  install_packages_for_testing: &install_packages_for_testing
    run:
      name: Install System packages needed for testing
      command: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client cmake
  restore_gems_cache: &restore_gems_cache
    restore_cache:
      keys:
        - check-financial-eligibility-partner-{{ checksum "Gemfile.lock" }}
        - check-financial-eligibility-partner
  install_gems: &install_gems
    run:
      name: Install ruby gems
      command: |
        sudo gem update --system
        bundle install --without development --path=vendor/bundle --jobs=4 && bundle clean
  save_gems_cache: &save_gems_cache
    save_cache:
      key: check-financial-eligibility-partner-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle
  setup_database: &setup_database
    run:
      name: Database Setup
      command: |
        bundle exec rake db:create db:schema:load
        bundle exec rake db:migrate

jobs:
  lint_checks:
    executor: linting-executor
    steps:
      - checkout
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache

  integration_tests:
    executor: test-executor
    steps:
      - checkout
      - *install_packages_for_testing
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - store_artifacts:
          path: ./report.html

  check_swagger:
    executor: test-executor
    steps:
      - checkout
      - *install_packages_for_testing
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache

  build_and_push:
    executor: basic-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - *update_packages
      - *build_docker_image
      - *setup_aws_login
      - *push_to_ecr

  deploy_uat: &deploy_uat
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s
      - deploy:
          name: Helm deployment to UAT
          command: |
            ./bin/uat_deploy

  deploy_main_uat:
    <<: *deploy_uat

  deploy_staging:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s
      - deploy:
          name: Helm deploy CFE Partner to Staging
          command: |
            helm upgrade check-financial-eligibility-partner ./deploy/helm/. \
                          --install --wait \
                          --namespace=${K8S_NAMESPACE} \
                          --values ./deploy/helm/values/staging.yaml \
                          --set image.repository="$ECR_ENDPOINT" \
                          --set image.tag="${CIRCLE_SHA1}"

  deploy_production:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s
      - deploy:
          name: Helm deploy CFE Partner to Production
          command: |
            helm upgrade check-financial-eligibility-partner ./deploy/helm/. \
                            --install --wait \
                            --namespace=${K8S_NAMESPACE}  \
                            --values ./deploy/helm/values/production.yaml \
                            --set image.repository="$ECR_ENDPOINT" \
                            --set image.tag="${CIRCLE_SHA1}" \

  delete_dependabot_deployment:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker
      - *authenticate_k8s
      - run:
          name: Delete dependabot deployment
          command: |
            ./bin/delete_dependabot_deployment

  clean_up_ecr:
    executor: linting-executor
    steps:
      - checkout
      - setup_remote_docker
      - *setup_aws_login
      - run:
          name: Delete old images from ecr repo
          command: |
            ./bin/clean_up_ecr

#generic-slack-fail-post-step: &generic-slack-fail-post-step
#  post-steps:
#    - slack/notify:
#        event: fail
#        template: basic_fail_1

workflows:
  version: 2
  add_branch:
    jobs:
      - lint_checks:
          filters:
            branches:
              ignore: main
      #          <<: *generic-slack-fail-post-step
      - integration_tests:
          filters:
            branches:
              ignore: main
      #          <<: *generic-slack-fail-post-step
      - check_swagger:
          filters:
            branches:
              ignore: main
      #          <<: *generic-slack-fail-post-step
      - build_and_push:
          filters:
            branches:
              ignore: main
      #          <<: *generic-slack-fail-post-step
      - deploy_uat:
          context: check-financial-eligibility-partner-uat
          requires:
            - lint_checks
            - check_swagger
            - build_and_push
      - delete_dependabot_deployment:
          context: check-financial-eligibility-partner-uat
          filters:
            branches:
              only:
                - /dependabot.*/
          requires:
            - deploy_uat
  #          <<: *generic-slack-fail-post-step

  merge_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              only: main
      #          <<: *generic-slack-fail-post-step
      - integration_tests:
          filters:
            branches:
              only: main
      #          <<: *generic-slack-fail-post-stepa
      - check_swagger:
          filters:
            branches:
              only: main
      #          <<: *generic-slack-fail-post-step
      - build_and_push:
          requires:
            - lint_checks
            - check_swagger
      #          <<: *generic-slack-fail-post-step
      - deploy_main_uat:
          context: check-financial-eligibility-partner-uat
          requires:
            - build_and_push
      #          <<: *generic-slack-fail-post-step
      - deploy_staging:
          context: check-financial-eligibility-partner-staging
          requires:
            - build_and_push
          filters:
            branches:
              only:
                - main
      - deploy_production_approval:
          type: approval
          requires:
            - build_and_push
          filters:
            branches:
              only:
                - main
      - deploy_production:
          context: check-financial-eligibility-partner-production
          requires:
            - deploy_production_approval
          filters:
            branches:
              only:
                - main
  #          <<: *generic-slack-fail-post-step

  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only: main
    jobs:
      - clean_up_ecr
